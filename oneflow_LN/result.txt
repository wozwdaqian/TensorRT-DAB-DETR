make: Nothing to be done for 'all'.
graph(%x : Float(*, *, 256, strides=[16384, 256, 1], requires_grad=0, device=cuda:0)):
  %1 : Float(requires_grad=0, device=cpu) = onnx::Constant[value={1}]()
  %input : Float(*, *, 256, strides=[16384, 256, 1], requires_grad=0, device=cuda:0) = onnx::Mul(%x, %1) # main.py:61:0
  %3 : Float(*, *, 1, device=cpu) = onnx::ReduceMean[axes=[-1]](%input) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %4 : Float(*, *, 256, device=cpu) = onnx::Sub(%input, %3) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %5 : Float(requires_grad=0, device=cpu) = onnx::Constant[value={2}]() # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %6 : Float(*, *, 256, device=cpu) = onnx::Pow(%4, %5) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %7 : Float(*, *, 1, device=cpu) = onnx::ReduceMean[axes=[-1]](%6) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %8 : Float(requires_grad=0, device=cpu) = onnx::Constant[value={1e-05}]() # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %9 : Float(*, *, 1, device=cpu) = onnx::Add(%7, %8) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %10 : Float(*, *, 1, device=cpu) = onnx::Sqrt(%9) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %11 : Float(*, *, 256, strides=[16384, 256, 1], requires_grad=0, device=cuda:0) = onnx::Div(%4, %10) # /usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:2486:0
  %12 : Float(requires_grad=0, device=cpu) = onnx::Constant[value={1}]()
  %y : Float(*, *, 256, strides=[16384, 256, 1], requires_grad=0, device=cuda:0) = onnx::Mul(%11, %12) # main.py:63:0
  return (%y)

Succeeded converting model into onnx!
Succeeded replacing LayerNorm Plugin node!
Succeeded building LayerNorm Plugin!
Succeeded loading engine!
EngineBinding0-> (-1, -1, 256) DataType.FLOAT
EngineBinding1-> (-1, -1, 256) DataType.FLOAT
check: True 4.7683716e-07 0.0064526256
Succeeded running model in TensorRT!
